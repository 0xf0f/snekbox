# https://aka.ms/yaml

jobs:
  - job: test
    displayName: 'Lint & Test'

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
      - task: ShellScript@2
        displayName: 'Check If Images Need to Be Built'
        name: check
        inputs:
          scriptPath: scripts/check_dockerfiles.sh

      - task: Docker@2
        displayName: 'Build Base Image'
        condition: and(succeeded(), ne(variables['check.BASE_PULL'], True))
        inputs:
          command: build
          repository: pythondiscord/snekbox-base
          tags: latest
          Dockerfile: docker/base.Dockerfile

      - task: Docker@2
        displayName: 'Build Development Image'
        inputs:
          command: build
          repository: pythondiscord/snekbox-venv
          tags: dev
          Dockerfile: docker/venv.Dockerfile
          arguments: --build-arg DEV=1

      - script: |
          docker run \
            -td \
            --name snekbox_test \
            --privileged \
            --network host \
            -h pdsnk-dev \
            -e PYTHONDONTWRITEBYTECODE=1 \
            -e PIPENV_PIPFILE="/snekbox/Pipfile" \
            -e ENV="${PWD}/scripts/.profile" \
            -v "${PWD}":"${PWD}" \
            -w "${PWD}"\
            --entrypoint /bin/ash \
            pythondiscord/snekbox-venv:dev
        displayName: 'Start Container'

      - script: |
          docker exec snekbox_test /bin/ash -c \
            'pipenv run lint --format junit-xml --output-file test-lint.xml'
        displayName: 'Run Linter'

      - task: PublishTestResults@2
        displayName: 'Publish Lint Results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-lint.xml'
          testRunTitle: 'Lint Results'

      - script: sudo swapoff -a
        displayName: 'Disable Swap Memory'

      - script: |
          docker exec snekbox_test /bin/ash -c \
            'pipenv run coverage run -m xmlrunner'
        displayName: 'Run Unit Tests'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/TEST-*.xml'
          testRunTitle: 'Test Results'

      - script: |
          docker exec snekbox_test /bin/ash -c \
            'pipenv run coverage xml'
        displayName: 'Generate Coverage Report'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Coverage Results'
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '**/coverage.xml'

  - job: build
    displayName: 'Build'
    dependsOn: test

    variables:
      BASE_CHANGED: $[ coalesce(dependencies.test.outputs['check.BASE_CHANGED'], True) ]
      VENV_CHANGED: $[ coalesce(dependencies.test.outputs['check.VENV_CHANGED'], True) ]
      BASE_PULL: $[ coalesce(dependencies.test.outputs['check.BASE_PULL'], False) ]

    steps:
      - task: Docker@1
        displayName: 'Login: Docker Hub'
        inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryEndpoint: 'DockerHub'
          command: 'login'

      - task: Docker@2
        displayName: 'Build Base Image'
        condition: >
          and(
            succeeded(),
            ne(variables.BASE_PULL, True),
            or(
              eq(variables.BASE_CHANGED, True),
              eq(variables.VENV_CHANGED, True)
            )
          )
        inputs:
          command: build
          repository: pythondiscord/snekbox-base
          tags: latest
          Dockerfile: docker/base.Dockerfile

      - task: Docker@2
        displayName: 'Build Virtual Environment Image'
        condition: >
          and(
            succeeded(),
            or(
              eq(variables.BASE_CHANGED, True),
              eq(variables.VENV_CHANGED, True)
            )
          )
        inputs:
          command: build
          repository: pythondiscord/snekbox-venv
          tags: latest
          Dockerfile: docker/venv.Dockerfile

      - task: Docker@2
        displayName: 'Build Final Image'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: build
          repository: pythondiscord/snekbox
          tags: latest
          Dockerfile: docker/Dockerfile

      - task: Docker@2
        displayName: 'Push Base Image'
        condition: >
          and(
            succeeded(),
            ne(variables['Build.Reason'], 'PullRequest'),
            ne(variables.BASE_PULL, True),
            or(
              eq(variables.BASE_CHANGED, True),
              eq(variables.VENV_CHANGED, True)
            )
          )
        inputs:
          command: push
          repository: pythondiscord/snekbox-base
          tags: latest

      - task: Docker@2
        displayName: 'Push Virtual Environment Image'
        condition: >
          and(
            succeeded(),
            ne(variables['Build.Reason'], 'PullRequest'),
            or(
              eq(variables.BASE_CHANGED, True),
              eq(variables.VENV_CHANGED, True)
            )
          )
        inputs:
          command: push
          repository: pythondiscord/snekbox-venv
          tags: latest

      - task: Docker@2
        displayName: 'Push Final Image'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: push
          repository: pythondiscord/snekbox
          tags: latest
