# https://aka.ms/yaml

jobs:
  - job: test
    displayName: 'Lint & Test'

    pool:
      vmImage: 'Ubuntu-16.04'

    steps:
      - task: ShellScript@2
        inputs:
          scriptPath: scripts/check_dockerfiles.sh
        name: check2
        displayName: 'Check If Images Need to Be Built'
        enabled: false

      - script: |
          echo "##vso[task.setvariable variable=BASE_CHANGED;isOutput=true]False"
          echo "##vso[task.setvariable variable=VENV_CHANGED;isOutput=true]False"
          echo "##vso[task.setvariable variable=BASE_PULL;isOutput=true]True"
        name: check
        displayName: 'Set Variables'
        enabled: false

      - script: echo $(check.BASE_PULL)
        displayName: 'Echo Output Variable in Same Job'
        enabled: false

      - script: echo foo
        condition: and(succeeded(), eq(variables['check.BASE_PULL'], True))
        displayName: 'Use Output Variable in Condition'
        enabled: false

      - task: Docker@2
        displayName: 'Login to Docker Hub'
        inputs:
          command: login
          containerRegistry: DockerHub

      - task: Docker@2
        displayName: 'Build Base Image'
        inputs:
          command: build
          repository: pythondiscord/snekbox-base
          tags: foobar
          Dockerfile: docker/base.Dockerfile
          buildContext: .

      - script: docker images -a
        displayName: 'List Docker Images'

      - script: |
          docker run \
            -td \
            --name snekbox_test \
            --privileged \
            --network host \
            -h pdsnk-dev \
            -e PYTHONDONTWRITEBYTECODE=1 \
            -e PIPENV_PIPFILE="/snekbox/Pipfile" \
            -e ENV="${PWD}/scripts/.profile" \
            -v "${PWD}":"${PWD}" \
            -w "${PWD}"\
            --entrypoint /bin/ash \
            pythondiscord/snekbox-base:foobar
        displayName: 'Start Container'

  - job: build
    displayName: 'Build'
    condition: >
      and(
        succeeded(),
        eq(dependencies.test.outputs['check.BASE_CHANGED'], True)
      )
    dependsOn: test

    variables:
      BASE_CHANGED: $[ coalesce(dependencies.test.outputs['check.BASE_CHANGED'], True) ]
      VENV_CHANGED: $[ coalesce(dependencies.test.outputs['check.VENV_CHANGED'], True) ]
      BASE_PULL: $[ coalesce(dependencies.test.outputs['check.BASE_PULL'], False) ]

    steps:
      - script: |
          echo "${BASE_CHANGED}"
          echo "${VENV_CHANGED}"
          echo "${BASE_PULL}"
        displayName: 'Echo All Variables'

      - script: echo bar
        condition: >
          and(
            succeeded(),
            eq(variables.BASE_CHANGED, False),
            eq(variables.VENV_CHANGED, False),
            eq(variables.BASE_PULL, True)
          )
        displayName: 'Compare String'

      - script: echo bar
        condition: and(succeeded(), eq(True, variables.BASE_PULL))
        displayName: 'Compare String Reverse'

      - script: echo bar
        condition: and(succeeded(), eq('True', variables.BASE_PULL))
        displayName: 'Compare String to String'

      - script: echo baz
        condition: and(succeeded(), variables.BASE_PULL)
        displayName: 'Compare Implicit Cast'
